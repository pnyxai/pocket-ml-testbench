services:
  postgresql:
    image: postgres:${POSTGRESQL_VERSION}
    container_name: postgresql
    command: "postgres -c config_file=/etc/postgresql/postgresql.conf"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-U", "postgres" ]
      interval: 10s
      timeout: 3s
      retries: 3
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - testbench
    expose:
      - 5432
    volumes:
      - postgresql:/var/lib/postgresql/data
      - ./postgresql/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./postgresql/init.sql:/docker-entrypoint-initdb.d/init.sql

  pgadmin:
    image: dpage/pgadmin4:${PGADMIN_VERSION}
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_LISTEN_PORT: 5050
    volumes:
      - ./postgresql/servers.json:/pgadmin4/servers.json
    depends_on:
      postgresql:
        condition: service_healthy
    ports:
      - "127.0.0.1:5050:5050"
    networks:
      - testbench

  temporal:
    image: temporalio/auto-setup:${TEMPORAL_VERSION}
    container_name: temporal
    healthcheck:
      test: [ "CMD", "tctl", "--address", "temporal:7233", "--namespace", "${TEMPORAL_NAMESPACE}", "workflow", "list" ]
      interval: 10s
      timeout: 2s
      retries: 5
    depends_on:
      postgresql:
        condition: service_healthy
    environment:
      DB: postgres12
      DB_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PWD: ${POSTGRES_PASSWORD}
      POSTGRES_SEEDS: postgresql
      DYNAMIC_CONFIG_FILE_PATH: "config/dynamicconfig/testbench.yaml"
      SKIP_DEFAULT_NAMESPACE_CREATION: "false"
      DEFAULT_NAMESPACE: ${TEMPORAL_NAMESPACE}
      DEFAULT_NAMESPACE_RETENTION: 7d
    networks:
      - testbench
    expose:
      - 7233
    volumes:
      - ./temporal/dynamicconfig:/etc/temporal/config/dynamicconfig

  temporal-admin-tools:
    image: temporalio/admin-tools:${TEMPORAL_TOOLS_VERSION}
    container_name: temporal-admin-tools
    depends_on:
      temporal:
        condition: service_healthy
    environment:
      TEMPORAL_ADDRESS: temporal:7233
      TEMPORAL_CLI_ADDRESS: temporal:7233
      TEMPORAL_CLI_NAMESPACE: ${TEMPORAL_NAMESPACE}
    networks:
      - testbench
    stdin_open: true
    tty: true

  temporal-tuneup:
    image: temporalio/admin-tools:${TEMPORAL_TOOLS_VERSION}
    container_name: temporal-tuneup
    restart: on-failure
    entrypoint: [ "/home/temporal/initialize.sh" ]
    networks:
      - testbench
    volumes:
      - ./temporal/initialize.sh:/home/temporal/initialize.sh
    depends_on:
      temporal:
        condition: service_healthy
    environment:
      TEMPORAL_ADDRESS: temporal:7233
      TEMPORAL_CLI_ADDRESS: temporal:7233
      TEMPORAL_CLI_NAMESPACE: ${TEMPORAL_NAMESPACE}

  temporal-ui:
    image: temporalio/ui:${TEMPORAL_UI_VERSION}
    container_name: temporal-ui
    depends_on:
      temporal:
        condition: service_healthy
    environment:
      TEMPORAL_ADDRESS: temporal:7233
      TEMPORAL_CORS_ORIGINS: http://localhost:8000
      TEMPORAL_DEFAULT_NAMESPACE: ${TEMPORAL_NAMESPACE}
    networks:
      - testbench
    ports:
      - "127.0.0.1:8080:8080"

  mongodb:
    image: mongo:${MONGODB_VERSION}
    container_name: mongodb
    restart: always
    command: [ "--replSet", "devRs", "--bind_ip_all" ]
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 3s
      retries: 3
    ports:
      - "127.0.0.1:27017:27017"
    volumes:
      - mongodb:/data/db
    networks:
      - testbench

  mongodb-init-replica:
    image: mongo:${MONGODB_VERSION}
    container_name: mongodb-init-replica
    restart: "no"
    command: ["mongosh", "--host", "mongodb", "/docker-entrypoint-initdb.d/init-mongo.js"]
    volumes:
      - ./mongodb/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - testbench

  mongodb-init-db:
    image: mongo:${MONGODB_VERSION}
    container_name: mongodb-init-db
    restart: "no"
    command: [ "mongosh", "--host", "mongodb", "/docker-entrypoint-initdb.d/init-db.js" ]
    volumes:
      - ./mongodb/init-db.js:/docker-entrypoint-initdb.d/init-db.js:ro
    depends_on:
      mongodb-init-replica:
        condition: service_completed_successfully
    networks:
      - testbench

volumes:
  mongodb:
    name: mongodb

  postgresql:
    name: postgresql

networks:
  testbench:
    driver: bridge
    name: testbench