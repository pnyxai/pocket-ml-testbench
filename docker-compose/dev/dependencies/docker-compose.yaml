services:
  postgresql:
    image: postgres:${POSTGRESQL_VERSION}
    container_name: postgresql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-U", "postgres" ]
      interval: 10s
      timeout: 3s
      retries: 3
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_USER}
      POSTGRES_USER: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - temporal
      - postgresql
    ports:
      - 5432:5432
    volumes:
      - postgresql:/var/lib/postgresql/data
      - ./postgresql/init.sql:/docker-entrypoint-initdb.d/init.sql
  
  pgadmin:
    image: dpage/pgadmin4:${PGADMIN_VERSION}
    container_name: pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_LISTEN_PORT: 5050
    volumes:
      - ./postgresql/servers.json:/pgadmin4/servers.json
      - ./postgresql/pgpass:/pgadmin4/pgpass
    depends_on:
      postgresql:
        condition: service_healthy
    ports:
      - 5050:5050
    networks:
      - postgresql

  temporal:
    image: temporalio/auto-setup:${TEMPORAL_VERSION}
    container_name: temporal
    depends_on:
      postgresql:
        condition: service_healthy
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PWD=${POSTGRES_PASSWORD}
      - POSTGRES_SEEDS=postgresql
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
    networks:
      - temporal
    ports:
      - 7233:7233
    volumes:
      - ./temporal/dynamicconfig:/etc/temporal/config/dynamicconfig
    labels:
      kompose.volume.type: configMap

  temporal-admin-tools:
    image: temporalio/admin-tools:${TEMPORAL_VERSION}
    container_name: temporal-admin-tools
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CLI_ADDRESS=temporal:7233
    networks:
      - temporal
    stdin_open: true
    tty: true

  temporal-ui:
    image: temporalio/ui:${TEMPORAL_UI_VERSION}
    container_name: temporal-ui
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000
    networks:
      - temporal
    ports:
      - 8080:8080
  
  wf-setup:
    image: temporalio/admin-tools:${TEMPORAL_VERSION}
    container_name: wf-setup
    restart: on-failure
    entrypoint: [ "/home/temporal/initialize.sh" ]
    networks:
      - temporal
    volumes:
      - ./temporal/initialize.sh:/home/temporal/initialize.sh
    depends_on:
      temporal:
        condition: service_started
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CLI_ADDRESS=temporal:7233

  mongodb:
    image: mongo:${MONGODB_VERSION}
    container_name: mongodb
    restart: always
    command: [ "--replSet", "devRs", "--bind_ip_all" ]
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 3s
      retries: 3
    ports:
      - 27017:27017
    volumes:
      - mongodb:/data/db
    networks:
      - mongodb
  
  mongodb-init-replica:
    image: mongo:${MONGODB_VERSION}
    container_name: mongodb-init-replica
    restart: "no"
    command: ["mongosh", "--host", "mongodb", "/docker-entrypoint-initdb.d/init-mongo.js"]
    volumes:
      - ./mongodb/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - mongodb

volumes:
  mongodb:
    name: mongodb
  postgresql:
    name: postgresql

networks:
  temporal:
    driver: bridge
    name: temporal
    
  postgresql:
    driver: bridge
    name: postgresql

  mongodb:
    driver: bridge
    name: mongodb
