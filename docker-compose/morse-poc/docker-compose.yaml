x-base: &base
  restart: unless-stopped
  extra_hosts:
    # this allows containers to call a port on the docker host machine
    # instead of localhost (because that will be container) use host.docker.internal
    # to resolve the docker host IP dynamically
    host.docker.internal: host-gateway
  networks:
    - morse-poc
  logging:
    options:
      mode: non-blocking
      max-size: "10m"
      max-file: "3"
      
x-base-pocket-core: &base-pocket-core
  <<: *base
  image: poktscan/pocket-core:MESH-RC-0.5.0-RC-0.11.1
  command: [ "pocket", "start", "--datadir=/home/app/.pocket/", "--keybase=false", "--forceSetValidators"]
  healthcheck:
    interval: 30s
    timeout: 1s
    retries: 10
  deploy:
    resources:
      limits:
        cpus: "2"
        memory: 3G

services:
  ### DEPENDENCIES
  postgresql:
    <<: *base
    image: postgres:${POSTGRESQL_VERSION}
    container_name: postgresql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-U", "postgres" ]
      interval: 10s
      timeout: 3s
      retries: 3
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_USER}
      POSTGRES_USER: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - 5432:5432
    volumes:
      - postgresql:/var/lib/postgresql/data
  
  pgadmin:
    <<: *base
    image: dpage/pgadmin4:${PGADMIN_VERSION}
    container_name: pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_LISTEN_PORT: 5050
    volumes:
      - ./dependencies_configs/postgresql/servers.json:/pgadmin4/servers.json
      - ./dependencies_configs/postgresql/pgpass:/pgadmin4/pgpass
    depends_on:
      postgresql:
        condition: service_healthy
    ports:
      - 5050:5050
  
  temporal:
    <<: *base
    image: temporalio/auto-setup:${TEMPORAL_VERSION}
    container_name: temporal
    depends_on:
      postgresql:
        condition: service_healthy
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PWD=${POSTGRES_PASSWORD}
      - POSTGRES_SEEDS=postgresql
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
    ports:
      - 7233:7233
    volumes:
      - ./dependencies_configs/temporal/dynamicconfig:/etc/temporal/config/dynamicconfig
    labels:
      kompose.volume.type: configMap
  
  temporal-admin-tools:
    <<: *base
    image: temporalio/admin-tools:${TEMPORAL_VERSION}
    container_name: temporal-admin-tools
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CLI_ADDRESS=temporal:7233
    stdin_open: true
    tty: true
    
  
  temporal-ui:
    <<: *base
    image: temporalio/ui:${TEMPORAL_UI_VERSION}
    container_name: temporal-ui
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000
    ports:
      - 8080:8080
  
  #### INITIALIZE MANAGER AND REQUESTER SCHEDULED WORKFLOWS @EVERY 1M
  wf-setup:
    <<: *base
#    build:
#      context: ./dependencies_configs/temporal
    image: temporalio/admin-tools:${TEMPORAL_VERSION}
    container_name: wf-setup
    restart: on-failure
    entrypoint: ["/home/temporal/initialize.sh"]
    volumes:
      - ./dependencies_configs/temporal/initialize.sh:/home/temporal/initialize.sh
    depends_on:
      temporal:
        condition: service_started
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CLI_ADDRESS=temporal:7233
      

  mongodb:
    <<: *base
    image: mongo:${MONGODB_VERSION}
    container_name: mongodb
    command: [ "--replSet", "devRs", "--bind_ip_all" ]
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 3s
      retries: 3
    ports:
      - 27017:27017
    volumes:
      - mongodb:/data/db
  
  mongodb-init-replica:
    <<: *base
    image: mongo:${MONGODB_VERSION}
    container_name: mongodb-init-replica
    restart: "no"
    command: [ "mongosh", "--host", "mongodb", "/docker-entrypoint-initdb.d/init-mongo.js" ]
    volumes:
      - ./dependencies_configs/mongodb/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    depends_on:
      mongodb:
        condition: service_healthy
        

  ### LLM ENGINE
  llm-engine:
    <<: *base
    container_name: llm-engine
    image: vllm/vllm-openai:${VLLM_VERSION}
    healthcheck:
      test: ["CMD-SHELL", "python3", "/root/healthcheck.py"]
    volumes:
      - ${MODELS_PATH}:/root/.cache/huggingface/hub/
      - ./dependencies_configs/llm-engine/healthcheck.py:/root/healthcheck.py
    ports:
      - 9087:9087
    environment:
      - MODEL_NAME=${MODEL_NAME}
      - NUM_GPUS=${NUM_GPUS}
      - QUANTIZATION=${QUANTIZATION}
      - GPU_MEMORY_UTILIZATION=${GPU_MEMORY_UTILIZATION}
      - MAX_MODEL_LEN=${MAX_MODEL_LEN}
      - MAX_NUM_SEQS=${MAX_NUM_SEQS}
    entrypoint: [ "python3",
                  "-m",
                  "vllm.entrypoints.openai.api_server",
                  "--model",
                  "${MODEL_NAME}",
                  "--tensor-parallel-size",
                  "${NUM_GPUS}",
                  "--quantization",
                  "${QUANTIZATION}",
                  "--dtype",
                  "auto",
                  "--gpu-memory-utilization",
                  "${GPU_MEMORY_UTILIZATION}",
                  "--max-model-len",
                  "${MAX_MODEL_LEN}",
                  "--served-model-name",
                  "${SERVED_MODEL_NAME}",
                  "--trust-remote-code",
                  "--max-num-seqs",
                  "${MAX_NUM_SEQS}",
                  "--port",
                  "9087"
    ]
    shm_size: '4gb' # This is only used for GPU parallelism
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              device_ids: [ '0' ] # Add more if you have more, remember to update the .env for GPU parallelism
              capabilities: [ gpu ]

  ### POCKET MORSE LOCALNET
  lean1:
    <<: *base-pocket-core
    container_name: lean1
    healthcheck:
      test: [ "CMD-SHELL", "wget --server-response --spider http://lean1.dev:8071/v1/health || exit 1" ]
    ports:
      - "8071:8071" # pokt rpc
      - "8073:8073" # prometheus
      - "26646:26646/tcp" # tendermint peer
      - "26646:26646/udp" # tendermint peer
      - "26647:26647" # tendermint rpc
    expose:
      - "26646"
    volumes:
      # Data
      - lean1:/home/app/.pocket
      
      # Exclusive main files
      - ./pocket_configs/lean1/config.json:/home/app/.pocket/config/config.json
      - ./pocket_configs/lean1/lean_nodes_keys.json:/home/app/.pocket/lean_nodes_keys.json
      
      # Common nodes files
      - ./pocket_configs/config/genesis.json:/home/app/.pocket/config/genesis.json
      - ./pocket_configs/config/chains.json:/home/app/.pocket/config/chains.json
      - ./pocket_configs/config/auth.json:/home/app/.pocket/config/auth.json
    hostname: lean1.dev
    networks:
      morse-poc:
        aliases:
          - lean1.dev
  
  lean2:
    <<: *base-pocket-core
    container_name: lean2
    healthcheck:
      test: [ "CMD-SHELL", "wget --server-response --spider http://lean2.dev:8081/v1/health || exit 1" ]
    ports:
      - "8081:8081" # pokt rpc
      - "8083:8083" # prometheus
      - "26656:26656/tcp" # tendermint peer
      - "26656:26656/udp" # tendermint peer
      - "26657:26657" # tendermint rpc
    expose:
      - "26656"
    volumes:
      # Data
      - lean2:/home/app/.pocket
      
      # Exclusive main files
      - ./pocket_configs/lean2/config.json:/home/app/.pocket/config/config.json
      - ./pocket_configs/lean2/lean_nodes_keys.json:/home/app/.pocket/lean_nodes_keys.json
      
      # Common nodes files
      - ./pocket_configs/config/genesis.json:/home/app/.pocket/config/genesis.json
      - ./pocket_configs/config/chains.json:/home/app/.pocket/config/chains.json
      - ./pocket_configs/config/auth.json:/home/app/.pocket/config/auth.json
    hostname: lean2.dev
    networks:
      morse-poc:
        aliases:
          - lean2.dev
  
  lean3:
    <<: *base-pocket-core
    container_name: lean3
    healthcheck:
      test: [ "CMD-SHELL", "wget --server-response --spider http://lean3.dev:8091/v1/health || exit 1" ]
    ports:
      - "8091:8091" # pokt rpc
      - "8093:8093" # prometheus
      - "26666:26666/tcp" # tendermint peer
      - "26666:26666/udp" # tendermint peer
      - "26667:26667" # tendermint rpc
    expose:
      - "26666"
    volumes:
      # Data
      - lean3:/home/app/.pocket
      
      # Exclusive main files
      - ./pocket_configs/lean3/config.json:/home/app/.pocket/config/config.json
      - ./pocket_configs/lean3/lean_nodes_keys.json:/home/app/.pocket/lean_nodes_keys.json
      
      # Common nodes files
      - ./pocket_configs/config/genesis.json:/home/app/.pocket/config/genesis.json
      - ./pocket_configs/config/chains.json:/home/app/.pocket/config/chains.json
      - ./pocket_configs/config/auth.json:/home/app/.pocket/config/auth.json
    hostname: lean3.dev
    networks:
      morse-poc:
        aliases:
          - lean3.dev
  
  mesh:
    <<: *base-pocket-core
    container_name: mesh
    command: [ "pocket", "start-mesh", "--datadir=/home/app/.pocket/" ]
    healthcheck:
      test: [ "CMD-SHELL", "wget --server-response --spider http://mesh.dev:9081/v1/health || exit 1" ]
    ports:
      - "9081:9081" # pokt rpc
      - "9084:9084" # prometheus
    volumes:
      # Data
      - mesh:/home/app/.pocket
      # Exclusive main files
      - ./pocket_configs/mesh/config.json:/home/app/.pocket/config/config.json
      - ./pocket_configs/mesh/keys.json:/home/app/.pocket/key/keys.json
      # Common nodes files
      - ./pocket_configs/config/auth.json:/home/app/.pocket/key/auth.json
      - ./pocket_configs/config/chains.json:/home/app/.pocket/chains/chains.json
    hostname: mesh.dev
    networks:
      morse-poc:
        aliases:
          - mesh.dev
    depends_on:
      lean1:
        condition: service_healthy
      lean2:
        condition: service_healthy
      lean3:
        condition: service_healthy

  ### POCKET-ML-TESTBENCH APPLICATIONS
  manager:
    <<: *base
    build:
      context: ../../
      dockerfile: apps/go/manager/Dockerfile
    image: pocket_ml_testbench_manager:dev
    container_name: manager
    environment:
      CONFIG_PATH: /home/app/configs/config.json
    volumes:
      - $MANAGER_CONFIG_FILE:/home/app/configs/config.json
    depends_on:
      temporal:
        condition: service_started
      mongodb:
        condition: service_healthy
      mesh:
        # manager use pocket rpc to retrieve the list of nodes
        condition: service_healthy

  sampler:
    <<: *base
    build:
      context: ../../
      dockerfile: apps/python/sampler/Dockerfile
    image: pocket_ml_testbench_sampler:dev
    container_name: sampler
    environment:
      CONFIG_PATH: /home/app/configs/config.json
      OPENAI_API_KEY: EMPTY
    volumes:
      - $SAMPLER_CONFIG_FILE:/home/app/configs/config.json
    depends_on:
      temporal:
        condition: service_started
      mongodb:
        condition: service_healthy
      postgresql:
        condition: service_healthy

  requester:
    <<: *base
    build:
      context: ../../
      dockerfile: apps/go/requester/Dockerfile
    image: pocket_ml_testbench_requester:dev
    container_name: requester
    environment:
      CONFIG_PATH: /home/app/configs/config.json
    volumes:
      - $REQUESTER_CONFIG_FILE:/home/app/configs/config.json
    depends_on:
      temporal:
        condition: service_started
      mongodb:
        condition: service_healthy
      mesh:
        # manager use pocket rpc to retrieve the list of nodes
        condition: service_healthy
        

networks:
  morse-poc:
    name: morse-poc
    driver: bridge
    
volumes:
  lean1:
  lean2:
  lean3:
  mesh:
  mongodb:
  postgresql: